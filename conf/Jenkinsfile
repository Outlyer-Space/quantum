pipeline {
    agent any

    // This pipeline will push repo changes on the local Outlyer server
    // dev.outlyer.space to GitHub at https://github.com/Outlyer-Space/quantum
    // the post receive hook script on the server will only
    // trigger this pipeline for "main" or "master" branches.

    // Access credentials
    environment {
        GITHUB_CRED = credentials('github-outlyercode')
        GITHUB_URL = 'github.com/Outlyer-Space/quantum.git'
    }

    stages {

        stage('Setup'){
            steps {
                echo "Starting build    ${env.BUILD_DISPLAY_NAME}"
                echo "cloning source to ${env.WORKSPACE}"
                echo "Building branch   ${env.GIT_LOCAL_BRANCH}"
                echo "Running as user/groups: "
                sh 'whoami;groups'
            }
        }

        stage('Test'){
            // Build & test latest code
            steps {
                echo 'Building docker image'
                sh 'docker build --pull -f docker/Dockerfile.azure -t quantum_azure:latest .'
                sh 'docker tag quantum_azure:latest outlyer.azurecr.io/quantum:latest'

                echo 'Applying VERSION tag'
                sh '''
                    TAG=$(<VERSION tr -d '[:space:]')
                    docker tag quantum_azure:latest outlyer.azurecr.io/quantum:${TAG}
                '''
            }
        }

        stage('Deploy'){
            // Push to container registry & force server refresh
            steps {
                echo 'Pushing to ACR'
                echo 'Forcing server refresh'
            }
        }

        stage('Publish') {
            steps {
                echo 'Publishing changes to GitHub'

                // Add GitHub as second git remote
                sh """
                    git remote add github https://${GITHUB_CRED}@${GITHUB_URL}
                """

                // Push the current HEAD to the GitHub remote
                sh """
                    git push github HEAD:refs/heads/main
                """
            }
        }

        stage('Cleanup') {
            // delete workspace
            steps {
                echo 'Cleaning up workspace'
                // forcing immedeate directory removal to avoid "remote exists"
                // errors on successive pipeline runs in quick order
                cleanWs(
                    deleteDirs: true,
                    disableDeferredWipeout: true
                    )

                echo 'Removing docker images'
                sh 'docker images --filter=reference="quantum:*" -q | xargs -r docker rmi -f'
            }
        }
    }

}
